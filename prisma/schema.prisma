// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TypeV {
  Tourisme
  agence_voyage
  personnel
  entreprise
}

enum TypeE {
  Accident
  Station_Interdite
  Incident
  denonciation
}

enum typeRole {
  USER
  ADMIN
  ASSURANCE
  CONTROLEUR
  FMO
}

model User {
  id          String           @id @default(uuid())
  firstname   String
  lastname    String
  username    String           @unique
  email       String           @unique
  hash        String
  address     String?
  phone       String
  role typeRole @default(USER)
  // region      String?
  // departement String?
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  // roleId      String
  // role        Role             @relation(fields: [roleId], references: [id])

  // UserHasVehicule  UserHasVehicule[]
  // UserHasEvenement UserHasEvenement[]

  @@map("user")
}

// model Role {
//   id      String  @id @default(uuid())
//   libelle String?

//   User    User[]

//   @@map("role")
// }

// model PermisDeConduire {
//   id              String   @id @default(uuid())
//   nomProprietaire String
//   prenom          String
//   dateNais        DateTime
//   villeNais       String?
//   addresse        String?
//   categorie       String
//   dateDeliv       DateTime
//   dateExp         DateTime



//   @@map("permis")
// }

model Voiture {
  id              String        @id @default(uuid())
  nochasis        String
  marque          String
  immatriculation String
  typeVehicId     String
  ctrlTechnique   TypeVehicule  @relation(fields: [typeVehicId], references: [id])
  docuId          String
  documentation   Documentation @relation(fields: [docuId], references: [id])

  @@map("vehicule")
}

model TypeVehicule {
  id          String    @id @default(uuid())
  type        String
  description String

  Voiture     Voiture[]

  @@map("typeVehicule")
}

model Documentation {
  id              String            @id @default(uuid())
  docId           String
  carteGrise      CarteGrise        @relation(fields: [docId], references: [id])
  assuranceId     String
  assurance       Assurance         @relation(fields: [assuranceId], references: [id])
  ctrlTechId      String
  ctrlTechnique   CtrlTechnique     @relation(fields: [ctrlTechId], references: [id])

  Voiture         Voiture[]
  // UserHasVehicule UserHasVehicule[]

  @@map("documentation")
}

model CarteGrise {
  id            String          @id @default(uuid())
  dateDelivr    DateTime
  dateExp       DateTime
  nbrCheveaux   Int
  hrsePower     String

  Documentation Documentation[]

  @@map("carteGrise")
}

model Assurance {
  id              String          @id @default(uuid())
  from            String?
  to              String
  typeVeh         TypeV           @default(personnel)
  registrationOn  DateTime
  insuredName     String?
  nameOfAssurance String?

  Documentation   Documentation[]

  @@map("assurance")
}

model CtrlTechnique {
  id              String          @id @default(uuid())
  dateCtrl        DateTime
  resultat        String?
  prochaineVisite DateTime
  nomEntreprise   String?
  villeCtrl       String?
  photoCtrl       String?

  Documentation   Documentation[]

  @@map("ctrlTechnique")
}

model Evenement {
  id               String             @id @default(uuid())
  typeEven         TypeE              @default(denonciation)
  lieux            String?
  pieceJointe      String?
  
  // UserHasEvenement UserHasEvenement[]

  @@map("evenements")
}

// model UserHasVehicule {
//   id            String        @id @default(uuid())
//   userId        String
//   user          User          @relation(fields: [userId], references: [id])
//   docuId        String
//   documentation Documentation @relation(fields: [docuId], references: [id])

//   @@map("userhasVehicule")
// }

// model UserHasEvenement {
//   id        String    @id @default(uuid())
//   userId    String
//   user      User      @relation(fields: [userId], references: [id])
//   evenId    String
//   evenement Evenement @relation(fields: [evenId], references: [id])

//   @@map("userEvenement")
// }
